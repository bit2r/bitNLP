% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/nlp.R
\name{replace_text}
\alias{replace_text}
\alias{concat_text}
\alias{split_text}
\alias{remove_text}
\title{Replace/remove/join/separate strings in text data}
\usage{
replace_text(
  doc,
  chunk = round(length(if (tibble::is_tibble(doc)) dplyr::pull(doc) else doc)/mc.cores),
  mc.cores = parallel::detectCores(),
  verbos = TRUE
)

concat_text(
  doc,
  chunk = round(length(if (tibble::is_tibble(doc)) dplyr::pull(doc) else doc)/mc.cores),
  mc.cores = parallel::detectCores(),
  verbos = TRUE
)

split_text(
  doc,
  chunk = round(length(if (tibble::is_tibble(doc)) dplyr::pull(doc) else doc)/mc.cores),
  mc.cores = parallel::detectCores(),
  verbos = TRUE
)

remove_text(
  doc,
  chunk = round(length(if (tibble::is_tibble(doc)) dplyr::pull(doc) else doc)/mc.cores),
  mc.cores = parallel::detectCores(),
  verbos = TRUE
)
}
\arguments{
\item{doc}{character. 문자열 대체/제거/결합/분리를 수행할 문자열 벡터}

\item{chunk}{integer. 병렬 작업 수행 시 처리 단위인 chunk}

\item{mc.cores}{integer. 병렬 작업 수행 시 사용할 코어의 개수}

\item{verbos}{logical. 메타의 Rule 당 처리된 건수를 화면에 출력할 지의 여부}
}
\value{
character. 문자열 대체/제거/결합이 수행된 문자열 벡터.
}
\description{
텍스트 데이터의 전처리 과정 중 패턴 일치되는 문자열에 대해서
다른 문자열로 대체하거나 제거, 혹은 결합한다.
}
\details{
Windows 운영체제에서는 병력작업이 지원되지 않기 때문에, 사용자의 설정과는 무관하게 mc.cores의 값이 1로 적용됩니다.
}
\examples{
\donttest{
##======================================================
## 문자열 대체
##======================================================

# 문자열 대체 메타 신규 등록
meta_path <- system.file("meta", package = "bitNLP")
fname <- glue::glue("{meta_path}/preparation_replace.csv")
set_meta("replace", fname, fileEncoding = "utf8")

# 등록된 문자열 대체 룰 확인하기
get_meta("replace")

doc_content <- buzz[, "CONTENT"]

# 문자열 대체, verbos = FALSE, chunk = 200
doc_content_after <- replace_text(doc_content, verbos = FALSE, chunk = 200)

# 문자열 대체, chunk = 500, mc.cores = 8
doc_content_after <- replace_text(doc_content, chunk = 500, mc.cores = 8)
}
\donttest{
##======================================================
## 문자열 결합
##======================================================

# 문자열 결합 메타 신규 등록
meta_path <- system.file("meta", package = "bitNLP")
fname <- glue::glue("{meta_path}/preparation_concat.csv")
set_meta("concat", fname, fileEncoding = "utf8")

# 등록된 문자열 결합 룰 확인하기
get_meta("concat")

doc_content <- buzz[, "CONTENT"]

## verbos = FALSE, chunk = 200
doc_content_after <- concat_text(doc_content, verbos = FALSE, chunk = 200)

## chunk = 500, mc.cores = 8
doc_content_after <- concat_text(doc_content, chunk = 500, mc.cores = 8)
}
\donttest{
##======================================================
## 문자열 분리
##======================================================

# 문자열 분리 메타 신규 등록
meta_path <- system.file("meta", package = "bitNLP")
fname <- glue::glue("{meta_path}/preparation_split.csv")
set_meta("split", fname, fileEncoding = "utf8")

# 등록된 문자열 분리 룰 확인하기
get_meta("split")

doc_content <- buzz[, "CONTENT"]

# 문자열 분리, verbos = FALSE, chunk = 200
doc_content_after <- split_text(doc_content, verbos = FALSE, chunk = 200)

# 문자열 분리, chunk = 500, mc.cores = 8
doc_content_after <- split_text(doc_content, chunk = 500, mc.cores = 8)
}
\donttest{
##======================================================
## 문자열 제거
##======================================================

# 문자열 제거 메타 신규 등록
meta_path <- system.file("meta", package = "bitNLP")
fname <- glue::glue("{meta_path}/preparation_remove.csv")
set_meta("remove", fname, fileEncoding = "utf8")

# 등록된 문자열 제거 룰 확인하기
get_meta("remove")

doc_content <- buzz[, "CONTENT"]

## verbos = FALSE, chunk = 800
doc_content_after <- remove_text(doc_content, verbos = FALSE, chunk = 800)

## chunk = 500, mc.cores = 8
doc_content_after <- remove_text(doc_content, chunk = 500, mc.cores = 8)
}

}
